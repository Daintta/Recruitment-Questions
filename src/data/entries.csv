id,category_id,question,answer,difficulty
,lang_py,Can you explain the difference between a list and a tuple in Python?,"A list is a mutable sequence of elements, while a tuple is an immutable sequence of elements. This means that you can add, remove, or modify elements in a list, but not in a tuple.",1
,lang_py,When would you use a set over a list or tuple?,"You would use a set when you're interested in whether you have seen certain data before, sets have faster access speeds than lists because they use hashing.<br><br>BONUS: mention of set O(1) vs list/tuple O(n)",1
,lang_py,How do you handle errors in Python code?,"try, except block", 1
,lang_py,What is your experience with object-oriented programming in Python?,"Looking for talk of classes, objects, inheritance, composition, polymorphism",1
,lang_py,Can you explain how Python's garbage collector works? (What is a garbage collector?),"Python's garbage collector is responsible for automatically freeing up memory that is no longer being used by a program. It works by periodically identifying and removing objects that are no longer being referenced by the program, freeing up the associated memory for other uses.<br><br>BONUS: talks about reference counting",2
,lang_py,What does the yield keyword do?,Yield 'pauses' the function and can return a value without ending it. It is used for iterators and async programming,2
,lang_py,Do you know about the Python Global Interpreter Lock?,"Looking for something along the lines of ensuring Python only executes Python Bytecode one thread at a time. It is essentially a Mutex. Only one thread can be actively running something at a time.",2
,lang_py,When would you use threading (or async) in Python? How would you do parallel execution?,"Follow on from previous question. Threading is still useful when I/O bound code (writing to disk, communicating over network) as other code can execute whilst waiting.",2
,lang_py,What is the difference between Python and C?,"C is compiled, Python has a garbage collector, Python is dynamically typed whereas C is static, C can achieve better performance because it has less overhead",2
,lang_py,What is an iterator? Why would you use one?,"Iterators return data incrementally, this is useful when processing large amounts of data as the whole dataset doesn't need to be loaded into memory.",2
,lang_py,What libraries might you use for data science?,"Numpy, pandas.<br><br>Tensorflow, pytorch, keras, ibis, fastai are also acceptable.",1
,lang_py,What libraries or tools might you use to add some type safety to python?,"Pydantic, mypy",1
,lang_py,When might you use a profiler,"To identify bottlenecks and inefficiencies that aren't obvious in the source code",2
,lang_py,Why is it a good idea to use a virtual environment? ,"- Package conflicts between projects<br>- Package conflicts with your host OS",2
,lang_py,"What are python's strengths and weaknesses, in your opinion?","Strengths: Readability, flexibility, easy to learn , very large developer base, with a ton of libraries and APIs for basically anything you want<br>Weaknesses: Slow, Packaging isn't great compared to a compiled language, Threading and GIL",2
,lang_go,"What is one of the key advantages of Using Go for building applications?","- Cross-platform<br>- Compiles down to a single binary that includes the dependencies<br>- Automatic memory management",1
,lang_go,"What is a Goroutine in Go and how does it differ from a traditional thread?","- Lightweight concurrent execution unit enabling concurrent programming (multiple function to run independently and concurrently<br>- Multiple goroutines can run on a single OS thread in an interleaved manner<br>- Thread count is limited but allows true parallel execution of tasks<br>- Threads are heavier in terms of memory/resource consumption",2
,lang_go,"Explain what a race-condition is in the context of goroutines. How can you prevent race-conditions in Go?","- Occurs when multiple concurrent threads (or goroutines) access shared data simultaneously, and at least one of them modifies the data. The order and timing of these operations aren't guaranteed and so can lead to data-corruption, crashes or other unexpected behaviour.<br>- Prevent with proper synchronisation - Mutex to lock the data before editing it",2
,lang_go,"How would you handle communication across goroutines/threads?","- Can't just instantly use a function that's returned in a goroutine as you don't know when it's back. (Don't want a race-condition!)<br>- Goroutines - Use channels and other sync primitives so wait for the data<br>- Thread - Use mutexas, semaphores or other OS-sync mechanisms",2
,lang_go,"What's the difference between a buffered and an unbuffered channel in Go?","- An unbuffered channel has a capacity of zero, so can only hold a single value at a time<br>- When a value is sent to an unbuffered channel, the sender will block until another goroutine is ready to receive the value - Buffered only blocks when the buffer is full<br>- unbuffered - Receiving blocks until value, enforces synchronisation<br>- buffered - Receiving blocks if empty, allows for async (sender/receiever can proceed as long as buffer isn't full/empty)",3
,skill_frontend,"Explain your understanding of the DOM. Given this, explain the benefits of leveraging a virtual DOM in frontend development?","Virtual DOM is useful in frameworks like React by optimising the web component reloads. It also enables state to automatically get inherited by components without explicit assignments.",1
,skill_frontend,"Under what circumstances does a component re-render in React?","1. Changes in props<br>2. Changes in state<br>3. Parent component re-renders<br>4. Context changes: If a component is consuming values from a React context using useContext (in functional components), and the context value changes, the component will re-render.<br>5. Using hooks with dependencies: Hooks like useEffect, useMemo, and useCallback accept dependency arrays as their second argument. When any of the listed dependencies change, the effect will run, or the memoized value or callback will be recomputed, potentially causing the component to re-render.",1
,skill_frontend,"How can we prevent unnecessary rerenders in React?","- React.memo<br>- Use the hook dependencies correctly in useCallback, useEffect and useMemo to avoid re-renders<br>- For big forms, prefer useRef over useState",2
,skill_frontend,"In Next.js how do API routes work?","Next.js API routes provide a built-in solution for creating API endpoints within a Next.js application. They are server-side functions that run when a request is made to their corresponding URL. To create an API route, simply create a new file with a .js extension inside the pages/api folder, and export a default request handler function.",2
,skill_frontend,"In Next.js what is the advantage of using Serverless mode?","- Improved scalability, as serverless functions can automatically scale based on demand.<br>- Cost efficiency, as you only pay for the compute resources you actually use.<br>- Easier deployment and management, as you don't need to manage your own servers or infrastructure.<br>- Faster response times due to the serverless functions being deployed closer to the users.",3
,skill_frontend,"Given you are building a website with repetitive API calls for retrieving assets like images. Lets assume these images do not change much over time, what strategy could you think of to optimise these network calls for repeat users?","Caching<br><br>BONUS: use headers to determine whether to pull cached response or not",2
,skill_frontend,"Now lets say we are loading lots of assets at the same time on a website for example, a list of products with their images. Assume these images are only set as a fixed high-quality size over the API. How would you optimise the API to reduce load on frontend?","Lazy loading. Add API call that only loads image thumbnail sizes, only if product is clicked are full assets loaded.",2
,skill_frontend,"What are the strategies we can use to optimize the performance of web applications?","CDNs, GraphQL (maybe) to reduce overfetching, improve backend performance, use SSR and/or SSG, lazy loading for loading assets only when it's needed, minimize and compress HTML, CSS and JS files, and optimize images by compressing and resizing them.",2
,skill_frontend,"What are Web Vitals (LCP, FID, CLS)? And how are they applied in the real world?","Web Vitals are standardized metrics to measure the quality of the navigation inside a website:<br>- LCP (Largest Contentful Paint) - LCP measures the time it takes for the largest visible content element to be fully loaded and rendered. A LCP is considered good when it takes less than 2.5 seconds.<br>- FID (First Input Delay) - FID measures the time it takes for the browser to respond to the user's first interaction. A FID is considered good when it takes less than 100 milliseconds.<br>- CLS (Cumulative Layout Shift) - CLS measures the visual stability of a page by calculating the sum of layout shift scores for all unexpected layout shifts during the entire lifespan of the page.",3
,skill_backend,"Why are Go programs particularly well suited for containerisation?","- Cross-platform<br>- Compiles down to a single binary that includes the Go library dependencies",2
,skill_backend,"What is a Goroutine in Go and how does it differ from a traditional thread?","- Lightweight concurrent execution unit enabling concurrent programming (multiple function to run independently and concurrently<br>- Multiple goroutines can run on a single OS thread in an interleaved manner<br>- Thread count is limited but allows true parallel execution of tasks<br>- Threads are heavier in terms of memory/resource consumption",3
,skill_backend,"Explain what a race-condition is in the context of goroutines. How can you prevent race-conditions in Go?","- Occurs when multiple concurrent threads (or goroutines) access shared data simultaneously, and at least one of them modifies the data. The order and timing of these operations aren't guaranteed and so can lead to data-corruption, crashes or other unexpected behaviour.<br>- Prevent with proper synchronisation - Mutex to lock the data before editing it",2
,skill_backend,"How would you handle communication across goroutines/threads?","- Can't just instantly use a function that's returned in a goroutine as you don't know when it's back. (Don't want a race-condition!)<br>- Goroutines - Use channels and other sync primitives so wait for the data<br>- Thread - Use mutexas, semaphores or other OS-sync mechanisms which can be error-prone and lead to race-conditions",2
,skill_backend,"What's the difference between a buffered and an unbuffered channel in Go?","- An unbuffered channel has a capacity of zero, so can only hold a single value at a time<br>- When a value is sent to an unbuffered channel, the sender will block until another goroutine is ready to receive the value - Buffered only blocks when the buffer is full<br>- unbuffered: Receiving blocks until value, enforces synchronisation<br>- buffered: Receiving blocks if empty, allows for async (sender/receiever can proceed as long as buffer isn't full/empty)",3
,scenario_type,"Your team is developing a new feature for a web application that allows users to upload and process large datasets, with results displayed in a highly interactive dashboard. Users expect quick processing times and smooth interactions. After launching an early version, users report that the dashboard is slow to load, especially when handling large datasets.<br><br>Setup is: DB + BE API + FE<br><br>Questions:<br>- How would you diagnose and improve performance issues on both the backend and frontend?<br>- How would you adjust the frontend to ensure a smooth user experience? What UI/UX considerations would you prioritise?","Backend:<br>- look for bottlenecks<br>- pagination<br>- lazy loading<br>- SQL query improvements - split into multiple queries?, inefficiencies<br>- DB indexing<br>- API endpoint size, can it be more succint?<br>- Preprocess CPU intensive, static data<br>- Async API<br>- Batch processing<br>- Caching<br>- Serverless functions<br>- Microservices<br><br>Frontend:<br>- Incremental loading<br>- Memoization<br>- loading spinners/placeholders",2
,skill_db,"Compare the differences between SQL and NoSQL databases?<br><br>What are the pros and cons of each?","SQL databases use SQL (Structured Query Language). NoSQL databases use JSON (JavaScript Object Notation), XML, YAML, or binary schema, facilitating unstructured data. SQL has a fixed-defined schema, while NoSQL databases are more flexible.",1
,skill_db,"In what scenario is database replication necessary?","High availability, backups. Anywhere where you need robustness in data availability.<br><br>Bonus points if you talk about read/write nodes, managing split-brain scenarios in your favourite database technology",2
,skill_db,"What database would you use for time-series data?","Looking for either:<br>- A time-series database like influx or timescale, with the rationale that it's built around time-series data<br>- Using time-series functionality in existing databases like postgres and mongo, because they're more widely used and better supported <br>- Either way, dig into any practical experience if they have it.",2
,scenario_type,"How would you handle a database that's showing instability under load? ","- Replication<br>- more efficient queries<br>- profiling<br>- review your data model for efficiency: improve cardinality, improve compressibility<br>- If SQL, look into other databases since SQL is (mostly) transferrable between databases<br>- Offload any batch processing to tools like apache spark<br>- Increase resources for the host machine (caveat that this isn't an infinitely scalable solution)",3
,skill_test,"Define Unit testing","Small-scale tests that can quickly validate small units of software function as expected. Usually at the function or class level.<br><br>Ideally, these should be by far the most numerous tests.",0
,skill_test,"Define Integration testing","Tests that validate the integration of multiple components.",1
,skill_test,"Define end-to-end testing","Tests that validate the complete data flow or operation of the program. These are often the most complex to write",1
,skill_test,"What are the strengths of manual testing over automated testing, and vice versa? ","Manual:<br>- good for complex testing that's impossible to automate or need only be performed infrequently.<br>- Exploratory testing allows for more specialised or creative testing outside of the basic test schema, validating more realistic usage.<br><br>Automated:<br>- Can exhaustively, repeatedly validate outputs of software far faster, more accurately, and in more detail than a human can <br><br>Realistically, a balance of both is optimal. ",2
,scenario_type,"Assume you've taken over maintenance of a codebase with no tests of any kind. How much of each kind of testing do you prioritise, between unit, integration, e2e, and manual testing? ","The testing pyramid:<br>- fewest number of manual tests<br>- small number of e2e tests<br>- more integration tests<br>- large number of unit tests<br><br>None of these should necessarily be prioritised over the others - a mix of all of them is best, and the volume is inversely proportional to complexity - unit tests are simplest to write, while good e2e tests can get pretty complex. ",3
,scenario_type,"What do you consider the difference is between the roles of “software engineer” and “software tester”?","A good software engineer should take responsibility for the quality of their code, and that includes testing. Similarly, a tester needs to understand the software they're testing; how it should behave, what happens when it's going wrong, and ideally why it goes wrong. <br><br>Incidentally, if a software engineer feels testing is “beneath them” or states something along the lines of “if you wrote good enough code you wouldn't need to test it”, that's a very bad sign.",2
,scenario_type,"Tell me about a time you've used IaC tools like Packer or Ansible ","Looking for a non-trivial project that's got some consideration of:<br>- stability<br>- accessibility<br>- reproducibility<br><br>Be sure to dig into the design choices they've made, and the reasoning behind them",2
,skill_pipelines,"Can you explain the difference between Continuous Integration and Continuous Deployment?","CI: A process where every commit to main is, at the very least, tested automatically. Usually it's also built. <br><br>CD: A process where every commit to main is built, and deployed to either a live service, or released to something like a container registry. ",2
,scenario_type,"Explain a time where you've had to interact with a CI/CD pipeline in a significant way (just running it doesn't count). What tooling did you use, and how do you feel about it? ","Looking for:<br>- having actually written a CI or CD pipeline, or done some significant work to modify or improve it<br>- What tooling are you familiar with? Have you critically evaluated whether this tooling is any good, and is your logic sound?",2
,skill_cont,"What is a container? How does it differ from a VM? ","Container: a standard unit of software that packages up code and all its dependencies so the application can run quickly and reliably on multiple computing environments. Docker, podman, etc<br><br>VMs virtualise the whole operating system - containers use namespaces to share kernel resources from the host OS",2
,skill_cont,"What is a multi-stage docker build, and why would you use one? ","A multi-stage build allows you to build on multiple parent images during the build process. For example, you might build and test a binary on a build container with all the necessary build tooling you need, then copy that final binary into a lightweight, security-hardened deployment container.<br><br>This process can also be used to reduce the number of layers in the final docker image. ",3
,skill_cont,"How would you orchestrate the deployment and maintenance of multiple containers?","docker-compose, or kubernetes. Bonus points if you can go into the benefits of either:<br><br>dc:<br>- simple<br>- comes free with docker <br><br>k8s:<br>- powerful tool that requires you understand how it works",3
,skill_cont,"Why would you containerise software? ","- portability<br>- dependency encapsulation<br>- orchestration tooling",2
,scenario_type,"Tell me about a time you've used container orchestration tools like docker-compose or kubernetes","Looking for a non-trivial project that's got some consideration of:<br>- stability<br>- accessibility<br>- reproducibility<br><br>Be sure to dig into the design choices they've made, and the reasoning behind them",3